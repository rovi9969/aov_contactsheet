#! C:/Program Files/Nuke13.0v2/nuke-13.0.2.dll -nx
version 13.0 v2
Gizmo {
 knobChanged "\nnode = nuke.thisNode()\nknob = nuke.thisKnob()\nif knob.name() == \"aov_filter\":\n    if knob.value() == \"All\":\n        check_knobs = \[knob for knob in node.knobs().keys() if knob.startswith('chk_')]\n        if check_knobs:\n            all_chk_knobs = \[knob for knob in node.knobs().keys() if knob.startswith('chk_')]\n            for chk_knob in all_chk_knobs:\n                node\[chk_knob].setValue(False)\n            for e_knob in check_knobs:\n                node\[e_knob].setValue(True)\n    if knob.value() == \"AOV_Lights\":\n        T_AOV_Lights = ('chk_rgba', 'chk_RGBA')\n        prefixes = T_AOV_Lights\n        check_knobs = \[knob for knob in node.knobs().keys() if knob.startswith(prefixes)]\n        if check_knobs:\n            all_chk_knobs = \[knob for knob in node.knobs().keys() if knob.startswith('chk_')]\n            for chk_knob in all_chk_knobs:\n                node\[chk_knob].setValue(False)\n            for e_knob in check_knobs:\n                node\[e_knob].setValue(True)\n    elif knob.value() == \"AOV_Shaders\":\n        T_AOV_Shaders = ('_direct', '_indirect', 'chk_diffuse', 'chk_specular', 'chk_coat', 'chk_sheen', 'chk_transmission', 'chk_sss', 'chk_emission', 'chk_volume', 'albedo')\n        substrings = T_AOV_Shaders\n        check_knobs = \[knob for knob in node.knobs() if isinstance(node\[knob], nuke.Boolean_Knob) and any(sub in knob for sub in substrings)]\n        if check_knobs:\n            all_chk_knobs = \[knob for knob in node.knobs().keys() if knob.startswith('chk_')]\n            for chk_knob in all_chk_knobs:\n                node\[chk_knob].setValue(False)\n            for e_knob in check_knobs:\n                node\[e_knob].setValue(True)\n    elif knob.value() == \"Tech\":\n        T_Tech_Passes = ('N', 'Z', 'P', 'motionvector', 'AO', 'Alpha', 'opacity', 'shw', 'shadow', 'crypto')\n        substrings = T_Tech_Passes\n        check_knobs = \[knob for knob in node.knobs() if isinstance(node\[knob], nuke.Boolean_Knob) and any(sub in knob for sub in substrings)]\n        if check_knobs:\n            all_chk_knobs = \[knob for knob in node.knobs().keys() if knob.startswith('chk_')]\n            for chk_knob in all_chk_knobs:\n                node\[chk_knob].setValue(False)\n            for e_knob in check_knobs:\n                node\[e_knob].setValue(True)\n    else:\n        pass\n"
 addUserKnob {20 rm_AOV_Contactsheet l "AOV Contactsheet"}
 addUserKnob {26 made_by l "" +STARTLINE T "<br><font size=4 color=grey><b>rm_AOV_Contactsheet v1.0</b></font><br><font size=2 color=grey>created by <u>Ravi Motwani</u>.<br>published : March, 2025.</font>"}
 addUserKnob {26 separator1 l "" +STARTLINE}
 addUserKnob {7 res_mult l "Resolution Multiplier" t "Adjusts resolution scale for the ContactSheet" R 0 5}
 res_mult 0.25
 addUserKnob {26 separator2 l "" +STARTLINE}
 addUserKnob {22 gather_aovs_btn l "Gather AOVs" T "import re \nimport nuke \n\nnode = nuke.thisNode()\n#print(node.name())\n\nread_node = node.input(0)\nif not read_node:\n    nuke.message(\"No input connected. Please connect an EXR file.\")\nelse:    \n    try:\n        channels = read_node.channels()\n    except ValueError:\n        nuke.message(\"The connected node does not have any channels.\")\n\n    if len(channels) > 0:\n        filtered_channels = \[]\n        for c in channels:\n            channel_name = c.split('.')\[0]\n            if 'crypto' in channel_name:\n                channel_name = re.sub(r'\\d+\$', '', channel_name)\n            filtered_channels.append(channel_name)\n\n        filtered_channels = sorted(set(filtered_channels))\n        if not filtered_channels:\n            nuke.message(\"No valid AOVs found after filtering.\")\n        else:\n            knobs_to_remove = \[knob for knob in node.knobs().keys() if knob.startswith(\"chk_\") or knob == \"AOVs\"]\n            for knob in knobs_to_remove:\n                if knob in node.knobs():\n                    node.removeKnob(node\[knob])\n\n            for ch in filtered_channels:\n                knob_name = \"chk_\" + ch\n                if knob_name not in node.knobs():\n                    knob = nuke.Boolean_Knob(knob_name, ch, True)\n                    knob.setFlag(nuke.STARTLINE)\n                    knob.setFlag(nuke.ALWAYS_SAVE)\n                    node.addKnob(knob)\n        \n        print(\"AOVs gathered successfully! Now click 'Create ContactSheet'.\")" +STARTLINE}
 addUserKnob {22 create_contactsheet_btn l "Create ContactSheet" -STARTLINE T "group = nuke.thisNode()\n\n#nuke.Script_Knob.execute(group\[\"clear_aovs\"])\n\ngroup = nuke.thisNode()\n\ngroup.begin()\nfor node in group.nodes():\n    if node.Class() not in \[\"Input\", \"Output\"]:\n        nuke.delete(node)\ngroup.end()\n\ngathered_aovs = \[knob.name().replace(\"chk_\", \"\") for knob in group.knobs().values() if knob.name().startswith(\"chk_\") and knob.value()]\n\nnum_channels = len(gathered_aovs)\n\nif num_channels > 0:\n    group.begin()\n    input_node = nuke.toNode(\"Input1\")\n    if not input_node:\n        input_node = nuke.createNode(\"Input\")\n        input_node.setName(\"Input1\")\n\n    read_node = input_node\n\n    base_width = read_node.width()\n    base_height = read_node.height()\n    aspect_ratio = 16 / 9\n    grid_cols = int((num_channels * aspect_ratio) ** 0.5)\n    grid_rows = (num_channels // grid_cols) + (num_channels % grid_cols > 0)\n    contactsheet_width = base_width * grid_cols\n    contactsheet_height = int(contactsheet_width / aspect_ratio)\n\n    dot1_node = nuke.createNode(\"Dot\")\n    dot1_node.setInput(0, read_node)\n\n    dot2_node = nuke.createNode(\"Dot\")\n    dot2_node.setInput(0, dot1_node)\n\n    mult1_node = nuke.createNode(\"Multiply\")\n    mult1_node.setInput(0, dot2_node)\n    mult1_node\[\"value\"].setValue(0)\n\n    add1_node = nuke.createNode(\"Add\")\n    add1_node.setInput(0, mult1_node)\n    add1_node\[\"value\"].setValue(\[1] * 4)\n    add1_node\[\"value\"].setExpression(\"parent.border_color.r\", 0)\n    add1_node\[\"value\"].setExpression(\"parent.border_color.g\", 1)\n    add1_node\[\"value\"].setExpression(\"parent.border_color.b\", 2)\n    add1_node\[\"value\"].setExpression(\"parent.border_color.a\", 3)\n\n    rectangle = nuke.createNode(\"Rectangle\")\n    rectangle.setInput(0, dot2_node)\n    rectangle\[\"area\"].setExpression(\"parent.border_size\", 0)\n    rectangle\[\"area\"].setExpression(\"parent.border_size\", 1)\n    rectangle\[\"area\"].setExpression(\"width-area.x\", 2)\n    rectangle\[\"area\"].setExpression(\"height-area.x\", 3)\n    rectangle\[\"replace\"].setValue(True)\n    rectangle\[\"invert\"].setValue(True)\n\n    merge1_node = nuke.createNode(\"Merge2\")\n    merge1_node.setInput(0, add1_node)\n    merge1_node.setInput(1, rectangle)\n    merge1_node\[\"operation\"].setValue(\"multiply\")\n\n    contactsheet = nuke.createNode(\"ContactSheet\")\n    contactsheet.setInput(0, None)\n    contactsheet.setName(\"AOV_ContactSheet\")\n    contactsheet\[\"width\"].setValue(contactsheet_width)\n    contactsheet\[\"height\"].setValue(contactsheet_height)\n    contactsheet\[\"rows\"].setValue(grid_rows)\n    contactsheet\[\"columns\"].setValue(grid_cols)\n    contactsheet\[\"roworder\"].setValue(\"TopBottom\")\n    contactsheet\[\"center\"].setValue(\"TopBottom\")\n\n    reformat1_node = nuke.createNode(\"Reformat\")\n    reformat1_node.setInput(0, contactsheet)\n    reformat1_node\[\"type\"].setValue(\"scale\")\n    reformat1_node\[\"scale\"].setExpression(\"parent.res_mult\")\n\n    dot3_node = nuke.createNode(\"Dot\")\n    dot3_node.setInput(0, reformat1_node)\n\n    text_nodes = \[]\n    \n    for channel in gathered_aovs:\n        if \"crypto\" in channel:\n            cryptomatte_node = nuke.createNode(\"Cryptomatte\")\n            cryptomatte_node.setInput(0, dot1_node)\n            cryptomatte_node\[\"cryptoLayerChoice\"].setValue(channel)\n            cryptomatte_node.setName(f\"Crypto_\{channel\}\")            \n            channel_node = cryptomatte_node\n        else:\n            shuffle = nuke.createNode(\"Shuffle\")\n            shuffle.setInput(0, dot1_node)\n            shuffle\[\"in\"].setValue(channel)\n            shuffle.setName(f\"Shuffle_\{channel\}\")\n            channel_node = shuffle\n\n        text = nuke.createNode(\"Text\")\n        text.setInput(0, channel_node)\n        text\[\"message\"].setValue(f\"\\n&emsp;&emsp;\{channel\}\")\n        text.setName(f\"Text_\{channel\}\")\n        text\[\"opacity\"].setExpression(\"parent.show_labels\")\n        text\[\"size\"].setExpression(\"50*parent.font_size_mult\")\n        text\[\"color\"].setValue(\[1] * 4)\n        text\[\"color\"].setExpression(\"parent.font_color.r\", 0)\n        text\[\"color\"].setExpression(\"parent.font_color.g\", 1)\n        text\[\"color\"].setExpression(\"parent.font_color.b\", 2)\n        text\[\"color\"].setExpression(\"parent.font_color.a\", 3)\n        text\[\"translate\"].setExpression(\"parent.transform_X_knob\", 0)\n        text\[\"translate\"].setExpression(\"parent.transform_Y_knob\", 1)\n        text\[\"font\"].setValue(\"C:/Windows/Fonts/arial.ttf\")\n        \n        merge2_node = nuke.createNode(\"Merge2\")\n        merge2_node.setInput(0, text)\n        merge2_node.setInput(1, merge1_node)\n        merge2_node\[\"operation\"].setValue(\"over\")\n        merge2_node\[\"mix\"].setExpression(\"parent.border_draw\")\n        \n        text_nodes.append(merge2_node)\n\n    for i, text_node in enumerate(text_nodes):\n        contactsheet.setInput(i, text_node)\n\n    output_node = nuke.toNode(\"Output1\")\n    if not output_node:\n        output_node = nuke.createNode(\"Output\")\n        output_node.setName(\"Output1\")\n    output_node.setInput(0, dot3_node)\n\n    group.end()\n    nuke.message(\"ContactSheet created successfully!\")\nelse:\n    nuke.message(\"EROR\")\n\ngroup.end()"}
 addUserKnob {22 clear_aovs l "Clear AOVs" -STARTLINE T "#self.clear_nodes(group)\n\ngroup = nuke.thisNode()\n\ngroup\[\"aov_filter\"].setValue(0)\n\ngroup.begin()\nfor node in group.nodes():\n    if node.Class() not in \[\"Input\", \"Output\"]:\n        nuke.delete(node)\ngroup.end()\n\ngroup.begin()\nknobs_to_remove = \[knob for knob in group.knobs().keys() if knob.startswith(\"chk_\") or knob == \"AOVs\"]\nfor knob in knobs_to_remove:\n    if knob in group.knobs():\n        group.removeKnob(group\[knob])\ngroup.end()\nprint(\"AOV list cleared successfully! Group reset to default.\")"}
 addUserKnob {20 text_labels_taba l "T E X T  L A B E L S :\n" t "Adjustment controls related to text" n 1}
 text_labels_taba 0
 addUserKnob {6 show_labels l "Show Labels" +STARTLINE}
 show_labels true
 addUserKnob {7 font_size_mult l "Font Size Multiplier" R 0 10}
 font_size_mult 1
 addUserKnob {19 font_color l "Font Color"}
 font_color {1 1 1 1}
 addUserKnob {6 font_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 transform_X_knob l "Translate X" R -100 100}
 addUserKnob {7 transform_Y_knob l "Translate Y" R -100 100}
 addUserKnob {20 text_labels_tab_end l "Text Labels" n -1}
 addUserKnob {20 border_tab l "B O R D E R :\n" t "Adjustment controls related to border color, thickness" n 1}
 border_tab 0
 addUserKnob {6 border_draw l "Draw Border" -STARTLINE}
 border_draw true
 addUserKnob {19 border_color l "Border Color"}
 border_color {0 0.5 0 0}
 addUserKnob {6 border_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {7 border_size l "Border Size" R 0 20}
 border_size 10
 addUserKnob {20 border_tab_end l Border n -1}
 addUserKnob {26 separator3 l "" +STARTLINE}
 addUserKnob {4 aov_filter l Preset t "Presets for AOVs selection in below list" M {All AOV_Lights AOV_Shaders Tech}}
 addUserKnob {1 channel_filter l "channel filter :" t "add common text of aovs and separate using comma,\neg : direct,indirect,sss"}
 addUserKnob {6 affect_channels l "affect channels" t "Enabling this will enable items of below list, disabling will turn it off." -STARTLINE}
 affect_channels true
 addUserKnob {22 toggle_channel_btn l "Toggle Channels" -STARTLINE T "group=nuke.thisNode()\naffect_channels_value = group\[\"affect_channels\"].value()\nchannel_filter_values = group\[\"channel_filter\"].value().replace(\" \", \"\").split(',')\naovs_knob = \[knob for knob in group.knobs().keys() if knob.startswith(\"chk_\")]\n\nfor channel_filter_value in channel_filter_values:\n    channel_list = \[x for x in aovs_knob if channel_filter_value in x]\n    for channel_name in channel_list:\n        group\[channel_name].setValue(affect_channels_value)"}
 addUserKnob {26 separator4 l "" +STARTLINE}
}
 Input {
  inputs 0
  name Input1
  xpos -2
  ypos 1
 }
 Output {
  name Output1
  xpos 0
  ypos 300
 }
end_group
